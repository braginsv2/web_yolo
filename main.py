"""
main.py - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import logging
import webbrowser
from collections import deque
from threading import Timer
from flask import Flask

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from config import (
    create_directories, get_camera_streams_config, 
    SERVER_CONFIG, LOGGING_CONFIG
)

from model_manager import ModelManager
from alarm_manager import AlarmManager
from camera_processor import CameraProcessor, VideoStreamGenerator, SegmentationAreaManager
from flask_routes import FlaskRoutes, CameraManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOGGING_CONFIG['level']),
    format=LOGGING_CONFIG['format']
)
logger = logging.getLogger(__name__)

class VideoAnalyticsApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.app = Flask(__name__)
        self.model_manager = ModelManager()
        self.alarm_manager = AlarmManager()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.segmentation_area_manager = SegmentationAreaManager()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–º–µ—Ä
        self.camera_streams = get_camera_streams_config()
        self._initialize_camera_queues()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–∞–º–µ—Ä
        self.processors = self._create_camera_processors()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–º–µ—Ä
        self.camera_manager = CameraManager(
            self.camera_streams, 
            self.processors, 
            self.model_manager,
            self.segmentation_area_manager  # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–æ—â–∞–¥–∏
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
        self.video_generator = VideoStreamGenerator(self.camera_streams)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self.routes = FlaskRoutes(
            self.app,
            self.camera_manager,
            self.alarm_manager,
            self.video_generator
        )

    def _initialize_camera_queues(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∫–∞–º–µ—Ä"""
        for camera_id in self.camera_streams:
            self.camera_streams[camera_id]['frame_queue'] = deque(maxlen=2)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            self.camera_streams[camera_id]['segmentation_area'] = 0

    def _create_camera_processors(self) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è –∫–∞–º–µ—Ä"""
        processors = {}
        
        # –§—É–Ω–∫—Ü–∏—è callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–∞—Ä–º–æ–≤
        def alarm_callback(camera_id: str, frame):
            self.alarm_manager.create_alarm(camera_id, frame)
        
        # –§—É–Ω–∫—Ü–∏—è callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        def segmentation_callback(camera_id: str, area: int):
            self.segmentation_area_manager.update_camera_area(camera_id, area)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
        for camera_id in ['camera1', 'camera2']:
            processors[camera_id] = CameraProcessor(
                camera_id=camera_id,
                camera_streams=self.camera_streams,
                yolo_model=None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –≤ _update_processors_models
                alarm_callback=alarm_callback,
                model_manager=self.model_manager,
                segmentation_callback=segmentation_callback  # –ù–æ–≤—ã–π callback
            )
        
        return processors

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        create_directories()
        logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ YOLO
        models_loaded = self.model_manager.load_models()
        if models_loaded:
            logger.info("ü§ñ YOLO –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            self._update_processors_models()
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å YOLO –º–æ–¥–µ–ª–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–ª–∞—Ä–º—ã
        self.alarm_manager.load_statistics()
        self.alarm_manager.load_alarms_from_folders()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–ª–∞—Ä–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _update_processors_models(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö"""
        segmentation_model = self.model_manager.get_segmentation_model()
        
        for processor in self.processors.values():
            processor.yolo_model = segmentation_model

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            Timer(SERVER_CONFIG['browser_delay'], self._open_browser).start()
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            self._print_startup_info()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app.run(
                debug=SERVER_CONFIG['debug'],
                host=SERVER_CONFIG['host'],
                port=SERVER_CONFIG['port'],
                threaded=SERVER_CONFIG['threaded']
            )
            
        except KeyboardInterrupt:
            logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self._cleanup()

    def _open_browser(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        url = f"http://{SERVER_CONFIG['host']}:{SERVER_CONFIG['port']}/"
        webbrowser.open_new(url)
        logger.info(f"üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç: {url}")

    def _print_startup_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("=" * 70)
        logger.info("üéØ –°–ò–°–¢–ï–ú–ê –í–ò–î–ï–û–ê–ù–ê–õ–ò–¢–ò–ö–ò –ó–ê–ü–£–©–ï–ù–ê")
        logger.info("=" * 70)
        logger.info(f"üåê URL: http://{SERVER_CONFIG['host']}:{SERVER_CONFIG['port']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –º–æ–¥–µ–ª—è—Ö
        model_info = self.model_manager.get_model_info()
        device_info = model_info['device_info']
        
        logger.info("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö:")
        logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã' if model_info['models_loaded'] else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}")
        logger.info(f"   üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['device'].upper()}")
        
        if device_info['available']:
            logger.info(f"   üî• GPU: {device_info['gpu_name']}")
            logger.info(f"   üíæ GPU –ø–∞–º—è—Ç—å: {device_info['gpu_memory_gb']} GB")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            from config import get_performance_recommendations
            recommendations = get_performance_recommendations()
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for rec in recommendations:
                logger.info(f"   {rec}")
        else:
            logger.info("   ‚ö†Ô∏è CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            logger.info("   üí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CUDA –∏ PyTorch —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–∞—Ö –∞–ª–∞—Ä–º–æ–≤
        from config import PENDING_DIR, CORRECT_DIR, INCORRECT_DIR
        logger.info("üìÅ –ü–∞–ø–∫–∏ –∞–ª–∞—Ä–º–æ–≤:")
        logger.info(f"   üìã –ù–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ: {PENDING_DIR}")
        logger.info(f"   ‚úÖ –í–µ—Ä–Ω—ã–µ: {CORRECT_DIR}")
        logger.info(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ: {INCORRECT_DIR}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–∞—Ä–º–æ–≤
        stats = self.alarm_manager.get_statistics()
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–∞—Ä–º–æ–≤:")
        logger.info(f"   üìä –í—Å–µ–≥–æ: {stats['total_alarms']}")
        logger.info(f"   ‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏: {stats['pending_alarms']}")
        logger.info(f"   ‚úÖ –í–µ—Ä–Ω—ã—Ö: {stats['correct_alarms']}")
        logger.info(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö: {stats['incorrect_alarms']}")
        logger.info(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy_percentage']}%")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        from config import YOLO_CONFIG, PROCESSING_CONFIG
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        logger.info(f"   üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {YOLO_CONFIG['imgsz']}")
        logger.info(f"   üîß Precision: {'FP16' if YOLO_CONFIG['half'] else 'FP32'}")
        logger.info(f"   üìä –ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤: –∫–∞–∂–¥—ã–π {PROCESSING_CONFIG['frame_skip']}-–π")
        logger.info(f"   üîÑ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {PROCESSING_CONFIG['queue_maxsize']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        logger.info("üîç –ü–æ–¥—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        logger.info("   üìê –ö–∞–º–µ—Ä–∞ 1: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª—é–¥–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–ª–æ—â–∞–¥–∏")
        logger.info("   üìê –ö–∞–º–µ—Ä–∞ 2: –î–µ—Ç–µ–∫—Ü–∏—è + —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–ª–æ—â–∞–¥–∏")
        logger.info("   ‚úñÔ∏è –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç")
        
        logger.info("=" * 70)

    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞–º–µ—Ä—ã
            for camera_id in ['camera1', 'camera2']:
                if self.camera_manager.is_camera_connected(camera_id):
                    self.camera_manager.disconnect_camera(camera_id)
                    logger.info(f"üìπ –ö–∞–º–µ—Ä–∞ {camera_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
            self.model_manager.unload_models()
            logger.info("ü§ñ YOLO –º–æ–¥–µ–ª–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.alarm_manager.save_statistics()
            logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            final_stats = self.segmentation_area_manager.get_stats()
            logger.info("üìê –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–æ—â–∞–¥–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")
            logger.info(f"   üìä –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {final_stats['total_calculations']}")
            logger.info(f"   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {final_stats['max_product']}")
            logger.info(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {final_stats['average_product']}")
            logger.info(f"   ‚úÖ –ù–µ–Ω—É–ª–µ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π: {final_stats['non_zero_products']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = VideoAnalyticsApp()
        app.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.run()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())